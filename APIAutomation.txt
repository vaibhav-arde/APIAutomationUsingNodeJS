API stand for Application Programming Interface.
It allows different applications to communicate and share data.
Transfer is between the host application (server) and the consumer application (Client).
To ensure quality and consistency the API process uses a number of protocols (like HTTP) and standards (REST).
The transfer of resources between connected applications is achieved using calls like Get, Post, Put and Delete, and each results in status code which confirms the output of the operation.
An authorization process is used to control who has accces to the API and can make request of it.

WEB SERVICE API :
A web service is a piece of a software, or a system, that provides access to its services via an address on a World Wide Web. This address is known as URI or URL.
Key point is that webservice offers its information in a format that other application can understand and parse.
WebService almost always involves communication over network and HTTP is the most commonly used protocol.

WebService API are of two kinds:
1. Simple Object Access Protocol (SOAP) and 
2. Representational State Transfer (REST)

=====================================================================================================

REST API:
REST is acronym for REpresentational State Transfer.
REST applies a common defination and standard of API development for web based applications.
It is an architectural style or pattern of development of resource-oriented web applications.
REST architecture maps CRUD (Create, Read, Update, Delete) to get the set of operations supported by the web service using HTTP method (e.g. POST, GET, PUT, DELETE).
REST mostly uses HTTP protocol for transport of data, although it can use any other protocol as well.
REST permits different data formats such as Plain text, HTML, XML, JSON etc.

REST VS SOAP:
REST is just architectural style.
SOAP is complete protocol
REST is prefered now days just because of its simplicity, where as SOAP is more secure and complex.

=======================================================================================================

HTTP Methods and Response Codes:
The HyperText Transfer Protocol (HTTP) is designed to enable communication between clients and server.
HTTP works as request-response protocol between a client and server.

GET:
a. Retrives info about the REST API resource
b. Doesn't change the state of the server (safe)
c. We don't submit any data/body.

POST:
a. Creats a new resource.
b. Changes the state of server (Unsafe)
c. We need to send a body.

PUT:
a. Updates an existing resource.
b. Changes the state of server (Unsafe)
c. We need to send a body.

DELETE:
a. Deletes an existing resource.
b. Changes the state of server (Unsafe)

HTTP Response Status Codes:
    Catagory                    Description                 
1xx : Informational     Communicates transfer protocol-level information
2xx : Success           Indicates that clients request was accepted successfully 
3xx : Redirectional     Indicates that client must take some additional action in order to complete their request.
4xx : Client Error      This catogory of error status codes points the finger at client
5xx : Server Error      The server takes responsibility for these error status codes.
        ----------------------------------------------------------
2xx : (200: OK, 201:Created, 202:Accepted, 204:No Content)
3xx : (300:Moved Permanently, 302:Found, 303:See Other, 304:NotModified, 307:Temporory Redirect)
4xx : (400:Bad request, 401:Unauthorised, 403:Forbidden, 404:Not Found, 405:Method Not Allowed, 406:Not Acceptable, 412:PreCondition Failed, 415:Unsupported Media types)

===========================================================================================================

Understanding PostMan:

reqres.in

Request need BaseURL and endpoint.

===========================================================================================================

API Testing:
API testing is a type of software testing that involves testing Application Programming Interfaces (APIs)
API testing involves testing API's directly (in isolation) and as a part of end-to-end transactions exercised during integration testing.
API testing is performed on API's that the development team produces as well as API's that team consumes within their application.
API testing is used to determine:
1. Whether APIs return the correct response (in the expected format) for a broad range of feasible request,
2. They react properly to edge cases such as failures and unexpected/extreme inputs,
3. Deliver responses in an acceptable amount of time, and 
4. Respond securely to potential security attacks.

Types of API Testing:
1. Unit Testing : Testing the functionality of individual operations.
2. Functional Testing : Testing the functionality of broader scenarios, often using unit tests as building blocks for end-to-end tests. Includes test case definition, execution, validation and regression testing.
3. Load Testing : Validating functionality and performance under load, often by reusing functional test cases. (tools : JMeter)
4. RunTime Error Detection : Monitoring an application while execution of automated or manual test to expose problems such as race condition, exceptions and resource leaks.
5. Security testing : Includes penetration testing and fuzz testing as well as validating authentication, encryption, and access control.
========================================================================================================

Mocha :
npm install mocha --save
Create a "test" folder in base project folder and and keep all testcase (.js) files in that.
In package.json update as : 
"scripts": {
    "test": "mocha"
  },
To execute test : npm test

Supertest :
npm install supertest --save

Should.js :
should.js is an assertion liabrary.
npm install should --save
=========================================================================================================
In package.json file we can add below to get extra time out:
"test": "mocha 'test/*.js'  --timeout 100000"

=========================================================================================================
Google Wheather API:
https://home.openweathermap.org/api_keys
https://api.openweathermap.org/data/2.5/weather?q=London,uk&appid=6dbb9aadaca36966430d9ed74d7c75d2
